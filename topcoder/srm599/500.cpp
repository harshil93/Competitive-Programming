#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

#define MAX_NUM 100001
int primes[MAX_NUM];

void gen_sieve_primes(vector<int> &vprimes)
{
    for (int p=2; p<MAX_NUM; p++) // for all elements in array
    {
        if(primes[p] == 0) // it is not multiple of any other prime
            primes[p] = 1; // mark it as prime

        // mark all multiples of prime selected above as non primes
        int c=2;
        int mul = p * c;
        for(; mul < MAX_NUM;)
        {
            primes[mul] = -1;
            c++;
            mul = p*c;
        }
    }
    for (int i = 0; i < MAX_NUM; ++i)
    {
    	if(primes[i]){
    		vprimes.push_back(i);
    	}
    }
}

class BigFatInteger2 {
public:
	vector<int> vprimes;
	BigFatInteger2(){
		gen_sieve_primes(vprimes);
	}
	string isDivisible(int64_t A, int64_t B, int64_t C, int64_t D) {
		vector<int64_t> va(vprimes.size(), 0);
		vector<int64_t> vc(vprimes.size(), 0);
		int isaprime=0,iscprime=0;
		for(int64_t i=0; i< vprimes.size(); i++){
			while(A!=0 && A%vprimes[i]==0){
				va[i]++;
				isaprime++;
				A = A/vprimes[i];
			}
			va[i]*=B;
		}
		
		for(int64_t i=0; i< vprimes.size(); i++){
			while(C!=0 && C%vprimes[i]==0){
				vc[i]++;
				iscprime++;
				C = C/vprimes[i];
			}
			vc[i]*=D;
		}
		if(!isaprime){
				return "not divisible";
		}
		for(int64_t i=0; i< vprimes.size(); i++){
			// cout<<va[i]<<" ## "<<vc[i]<<endl;
			if(va[i]<vc[i]){
				cout<<"@@ "<<vprimes[i]<<endl;
				cout<<va[i]<<" "<<vc[i]<<endl;
				return "not divisible";
			}
		}
		
		return "divisible";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, string p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	BigFatInteger2 *obj;
	string answer;
	obj = new BigFatInteger2();
	clock_t startTime = clock();
	answer = obj->isDivisible(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p4 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	string p4;
	
	{
	// ----- test 0 -----
	p0 = 6;
	p1 = 1;
	p2 = 2;
	p3 = 1;
	p4 = "divisible";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 1;
	p2 = 6;
	p3 = 1;
	p4 = "not divisible";
	 all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000000000;
	p1 = 1000000000;
	p2 = 1000000000;
	p3 = 200000000;
	p4 = "divisible";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 8;
	p1 = 100;
	p2 = 4;
	p3 = 200;
	p4 = "not divisible";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 999999937;
	p1 = 1000000000;
	p2 = 999999929;
	p3 = 1;
	p4 = "not divisible";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2;
	p1 = 2;
	p2 = 4;
	p3 = 1;
	p4 = "divisible";
	 all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!